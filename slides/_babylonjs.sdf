## Babylon.js

!image(assets/images/babylonjs/babylonjs.png,logo babylonjs,, 400)

## Historique .[babylon]

<table style="margin-top: 40px">
<tr>
<td style="padding: 20px">
OpenGL en 1992 par Silicon Graphics
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/OpenGL_logo.svg.png, opengl, , 150)
</td>
</tr>
<tr>
<td style="padding: 20px">
Concurrence avec DirectX
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/Microsoft-DirectX-Logo-wordmark.svg, directx, , 150)
</td>
</tr>
<tr>
<td style="padding: 20px">
Vulkan en 2016
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/Vulkan.svg, vulkan, , 150)
</td>
</tr>
</table>

/*
Des jeux comme Quake, Half-life 2, Red Dead Redemption 2, Unreal Tournament, ...
Cross plateform
*/

/*
DirectX, que sur windows, depuis 2020, une promesse de passer sur linux (wsl)
*/

## Moteurs 3D web .[babylon]

<table style="margin-top: 40px">
<tr>
<td style="padding: 20px">
Three.js depuis 2010
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/Threejs.svg,, 200)
</td>
<td style="padding: 20px">
Babylon.js depuis 2015
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/babylonjs.png,, 200)
</td>
</tr>
<tr>
<td style="padding: 20px">
WebGL depuis 2011
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/WebGL_Logo.svg,, 200)
</td>
<td style="padding: 20px">
WebGPU depuis 2023
</td>
<td style="background: white; padding: 20px">
!image(assets/images/babylonjs/webgpu.png,, 200)
</td>
</tr>
</table>

/*
WEBGPU : Talk de Corentin Wallez et Sébastien Vandenberghe au devfest toulouse
*/

## Principal concurrent : Three.js .[babylon]

5 ans d'expériences de plus

Poussé depuis 2020 par ``react-three-fiber``

## Three.js vs Babylon.js .[babylon]

Comment fait-on un cylindre ?

!image(assets/images/babylonjs/cylinder.png)

## cylinder.three.js .[babylon]

<pre>
<code class="language-javascript">
const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );
</code>
</pre>
<pre>
<code class="language-javascript">
const material = new THREE.MeshBasicMaterial( {color: 0xffffff} ); 
</code>
</pre>
<pre>
<code class="language-javascript">
const cylinder = new THREE.Mesh( geometry, material );
</code>
</pre>
<pre>
<code class="language-javascript">
scene.add( cylinder );
</code>
</pre>

/*
radiusTop : Float, radiusBottom : Float, height : Float, radialSegments : Integer
*/

## cylinder.babylon.js .[babylon]

<pre>
<code class="language-javascript">
const myMaterial = new BABYLON.StandardMaterial( "myMaterial", scene );
myMaterial.diffuseColor = BABYLON.BabylonColor3.FromHexString( "#ffffff" );
</code>
</pre>
<pre>
<code class="language-javascript">
const cylinder = BABYLON.MeshBuilder.CreateCylinder(
    "cylinder", 
    {
        height: 20, 
        diameterTop: 10, 
        diameterBottom: 10, 
        subdivisions: 32
    }, 
    scene
);
cylinder.material = myMaterial;
</code>
</pre>

## Avantages de Babylon.js .[babylon]

Code lisible

TypeScript

## Passons à la pratique .[babylon]

## On crée une scène .[babylon]

<pre>
<code class="language-javascript">
const canvas = document.getElementById(canvasId);
const engine = new Babylon.Engine(canvas, true, {
    preserveDrawingBuffer: true,
    stencil: true,
});
const scene = new Babylon.Scene(engine);
scene.clearColor = Babylon.Color3.FromHexString("#9fc9dc");
</code>
</pre>

## On ajoute caméra, lumière, ... .[babylon]

<pre>
<code>
const camera = new Babylon.ArcRotateCamera(
    "camera",
    -Math.PI / 2,
    Math.PI / 2.5,
    3,
    Babylon.Vector3.Zero(),
    scene
);
camera.attachControl(canvas, false);
new BabylonHemisphericLight("light", new Babylon.Vector3(2, 3, 3), scene);
new BabylonHemisphericLight("light", new Babylon.Vector3(2, 3, -3), scene);
engine.runRenderLoop(() => scene.render());
</code>
</pre>

/*
Camera : name, alpha (rotation longitude), beta (rotation latitude), radius (distance de la cible), cible
*/

## Construisons une "carte" de Kody .[babylon]

<pre>
<code class="language-javascript">
const material = new Babylon.StandardMaterial("std", scene);
material.diffuseColor = Babylon.Color3.FromHexString(color);
const card = Babylon.MeshBuilder.CreateBox("box", {
    width,
    height,
    depth,
});
card.material = material;
</code>
</pre>

## Comment je fais des trous ??? .[babylon]